import torch
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.preprocessing import StandardScaler
import torch.nn as nn
from matplotlib import pyplot as plt
from torch.utils.data import DataLoader
from sklearn.model_selection import train_test_split
from torch.utils.data import DataLoader,TensorDataset,Dataset
import time
df=torch.load('JSFD02/JSFD02')
LEN=len(df)
train_len=int(LEN*(0.7))
valid_len=int(LEN*(0.2))
test_len=int(LEN*(0.1))
df_train=df.iloc[0:train_len]
df_valid=df.iloc[train_len:train_len+valid_len]
df_test=df.iloc[-test_len:]
class Dataset_customer(Dataset):
    def __init__(self,df,size):
        # 去除时间列, 修改np 类型 object-->float64
        self.data=df.values[:,1:].astype('float64') 
        self.seq_len = size[0]
        self.label_len = size[1]
        self.pred_len = size[2]

    def __getitem__(self, index):
        X1 = self.data[index:index+self.seq_len,:]
        X2 = self.data[index+self.seq_len:index+self.seq_len+self.pred_len,1:2]
        y = self.data[index+self.seq_len:index+self.seq_len+self.pred_len,0:1]
        return X1,X2,y
    def __len__(self):    
        return len(self.data) - self.seq_len - self.pred_len + 1
seq_len = 20;  label_len=None; pred_len=4
size=[seq_len,label_len,pred_len]
Dataset_train=Dataset_customer(df_train,size)
Dataset_valid=Dataset_customer(df_valid,size)
Dataset_test=Dataset_customer(df_test,size)
Loader_train=DataLoader(Dataset_train,batch_size=64,drop_last=True)
Loader_valid=DataLoader(Dataset_valid,batch_size=64,drop_last=True)
Loader_test=DataLoader(Dataset_test,batch_size=64,drop_last=True)
torch.save(Loader_train,'Loader_train')
torch.save(Loader_valid,'Loader_valid')
torch.save(Loader_test,'Loader_test')
